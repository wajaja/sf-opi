imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@OPUserBundle/Resources/config/services.yml"}
    - { resource: fos_elastica.yml }
    - { resource: oneup_uploader.yml }

framework:
    assets:
        base_url: http://opinion:8080                       #Configuration du bundle FrameWork
    esi:             { enabled: true }
    translator:      { fallbacks: ["%locale%"] }            #Traducteur
    secret:          "%secret%"                             #Mot de passe -Secret-
    router:
        resource: "%kernel.root_dir%/config/routing.yml"    #Fichier de route
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:   "%locale%"
    trusted_hosts:   ~
    #trusted_proxies: ~ #remove since symfony3.3.0 upgrade
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id: snc_redis.session.handler  #session.handler.mongo
        cookie_lifetime: 2592000 # optional, it is set to 30 days here
        gc_maxlifetime: 2592000 # optional, it is set to 30 days here
        cookie_domain: .opinion.com
        save_path:  '%kernel.root_dir%var/session'
        # auto_start:     true  
        name: SFSESSID
    fragments:       ~
    http_method_override: true  #for foscomment;
services:
    mongo_client:
        class: MongoClient
        # if using a username and password
        #arguments: ['mongodb://%mongodb_username%:%mongodb_password%@%mongodb_host%:27017']
        # if not using a username and password
        arguments: ['mongodb://%mongodb_host%:27017']
    session.handler.mongo:
        class: Symfony\Component\HttpFoundation\Session\Storage\Handler\MongoDbSessionHandler
        arguments: ['@mongo_client', '%mongo.session.options%']
    # session.handler.memcache:
    #     class: Symfony\Component\HttpFoundation\Session\Storage\Handler\MemcacheSessionHandler
    #     arguments: [ "@session.memcache", { expiretime: '%session_lifetime%' } ]
    # session.memcache:
    #     class: Memcache #OP\UserBundle\Utils\MemcacheWrapper #https://labs.madisoft.it/scaling-symfony-sessions-with-memcached/
        # arguments:
        #     - '%memcache_prefix%'
        # calls:
        #     - [ addServer, [ '%session_host%, '%session_port%' ]]
    snc_redis.session.handler:
        class: Snc\RedisBundle\Session\Storage\Handler\RedisSessionHandler
        arguments: ["@snc_redis.session", "%session.storage.options%", "%snc_redis.session.prefix%", "%snc_redis.session.locking%", "%snc_redis.session.spin_lock_wait%"]
    op_user.registration.form.type:
        class: OP\UserBundle\Form\Type\RegistrationFormType
        arguments: 
            - '@op_user.user_manager'
        tags:
            - { name: form.type, alias: registration }
    op_user.group.form.type:
        class: OP\UserBundle\Form\Type\GroupFormType
        arguments: 
            - '@op_user.user_manager'
        tags:
            - { name: form.type, alias: group }
    gos_web_socket.client_storage.driver.predis:
        class: Gos\Bundle\WebSocketBundle\Client\Driver\PredisDriver
        arguments:
            - "@snc_redis.cache"
            - '%web_socket_server.client_storage.prefix%' #(optionally)if you use prefix
parameters:                    #in additionnal to parameters.yml file
    mongo.session.options:
        database: opinion # your MongoDB database name
        collection: session  # your MongoDB collection name
    mongodb_host: 127.0.0.1 # your MongoDB server's IP
    elasticsearch_host: 127.0.0.1
    elasticsearch_port: 9200
    #config from https://blog.intelligentbee.com/2015/12/02/send-emails-in-symfony2-the-right-way/
    contact_email: contact@opinion.com
    from_email: developer@opinion.com
    from_name: Opinion
    # mongodb_username:
    # mongodb_password:
# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
# assetic:
#     debug:          true
#     use_controller: true
#     #java:           /usr/bin/java
#     bundles:
#         #Default (all currently registered bundles):
#         - FrameworkBundle
#         - SecurityBundle
#         - TwigBundle
#         - MonologBundle
#         - SwiftmailerBundle
#         - DoctrineBundle
#         - AsseticBundle
#         - OPPostBundle
#         - OPUserBundle
# #        - OPMediaBundle
# #        - OPSocialBundle
#     filters:
#         cssrewrite: ~
monolog:
    handlers:
        main:
            type: service
            id: monolog.handler.redis
            level: debug
# Doctrine Configuration
doctrine:
# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

#https://www.blog.davidfuhr.de/2016/09/28/implement-a-datetimeinterface-handler-for-jmsserializer.html
jms_serializer:
    handlers:
        datetime:
            default_format: "Y-m-d\\TH:i:sP" # ATOM; 'c' # ISO8601
            default_timezone: "UTC" # defaults to whatever timezone set in php.ini or via date_default_timezone_set
        array_collection:
            initialize_excluded: false

    subscribers:
        doctrine_proxy:
            initialize_virtual_types: false
            initialize_excluded: false

    object_constructors:
        doctrine:
            fallback_strategy: "null" # possible values ("null" | "exception" | "fallback")

    # property_naming:
    #     id: ~
    #     separator:  _
    #     lower_case: true
    #     enable_cache: true

    metadata:
        directories:
            userbundle:
                namespace_prefix: "FOS\\UserBundle"
                path: "%kernel.root_dir%/Resources/serializer"
        # cache: file
        # debug: "%kernel.debug%"
        # file_cache:
        #     dir: "%kernel.cache_dir%/serializer"

        # Using auto-detection, the mapping files for each bundle will be
        # expected in the Resources/config/serializer directory.
        #
        # Example:
        # class: My\FooBundle\Entity\User
        # expected path: @MyFooBundle/Resources/config/serializer/Entity.User.(yml|xml|php)
        auto_detection: true

        # if you don't want to use auto-detection, you can also define the
        # namespace prefix and the corresponding directory explicitly
        # directories:
        #     any-name:
        #         namespace_prefix: "My\\FooBundle"
        #         path: "@MyFooBundle/Resources/config/serializer"
        #     another-name:
        #         namespace_prefix: "My\\BarBundle"
        #         path: "@MyBarBundle/Resources/config/serializer"

    expression_evaluator:
        id: jms_serializer.expression_evaluator # auto detected

    default_context:
        serialization:
            serialize_null: false
            version: ~
            attributes: {}
            groups: ['Default', 'Profile', 'Infos', 'Detail', 'Me', 'elastica', 'WithMutual']
            enable_max_depth_checks: false
        deserialization:
            serialize_null: false
            version: ~
            attributes: {}
            groups: ['Default', 'Profile', 'Infos', 'Detail', 'Me', 'elastica', 'WithMutual']
            enable_max_depth_checks: false

    # visitors:
    #     json:
    #         options: 0 # json_encode options bitmask, suggested JSON_PRETTY_PRINT in development
    #     xml:
    #         doctype_whitelist:
    #             - '<!DOCTYPE authorized SYSTEM "http://some_url">' # an authorized document type for xml deserialization
    #         format_output: true # suggested false in production               

#fos_rest config
fos_rest:
    #disable_csrf_role: ROLE_API
    param_fetcher_listener: true
    body_listener:
        enabled: true
        decoders:
            jsontoform: fos_rest.decoder.jsontoform
            json: fos_rest.decoder.json
            # xml: fos_rest.decoder.xml
        array_normalizer:
            service: fos_rest.normalizer.camel_keys
            forms: true    # Want form data to be normalized,
    format_listener: true
        # enabled: true
        # rules:
        #     - { path: ^/api/, priorities: [ json ], fallback_format: json, prefer_extension: true } #to have .json at the end of all our routes
    view:
        view_response_listener: 'force'    # makes it possible for us to return a View instance (set true in sensioFrameworkExtraBundle to handle fos_rest view )
        formats:
            xml: false
            json : true
            rss: false
        templating_formats:
            html: true
        force_redirects:
            html: true
        mime_types:
            json: ['application/json', 'application/x-json']
        failed_validation: HTTP_BAD_REQUEST
        default_engine: twig
    routing_loader:
        default_format: json
        include_format: false
    exception:
        enabled: true      # will generate a nice JSON error output, rather than a plain old HTML blow up.
lexik_jwt_authentication:
    # ssh private key path
    private_key_path:    '%kernel.root_dir%/../var/jwt/private.pem'
    # ssh public key path
    public_key_path:     '%kernel.root_dir%/../var/jwt/public.pem'
    # ssh key pass phrase
    pass_phrase:         'OPINION'
    # token ttl
    token_ttl:           3600
    # key under which the user identity will be stored in the token payload
    user_identity_field: username

    # token encoding/decoding settings
    encoder:
        # token encoder/decoder service - default implementation based on the namshi/jose library
        service:            lexik_jwt_authentication.encoder.default
        # crypto engine used by the encoder service
        crypto_engine:  openssl
        # encryption algorithm used by the encoder service
        signature_algorithm: RS256

    # token extraction settings
    # token_extractors:
    #     authorization_header:      # look for a token as Authorization Header
    #         enabled: true
    #         prefix:  Bearer
    #         name:    Authorization
    #     cookie:                    # check token in a cookie
    #         enabled: false
    #         name:    BEARER
    #     query_parameter:           # check token in query string parameter
    #         enabled: false
    #         name:    bearer
#nelmio_api_doc
nelmio_api_doc: ~
#nelmio_cors_bundle
nelmio_cors:
    # defaults:
    #     allow_credentials: false
    #     allow_origin: []
    #     allow_headers: []
    #     allow_methods: []
    #     expose_headers: []
    #     max_age: 0
    #     hosts: []
    #     origin_regex: false
    paths:
        '^/api/':
            allow_origin: ['*']
            allow_headers: ['X-Custom-Auth']  #['*']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
            max_age: 86400
        # '^/':
        #     origin_regex: true
        #     allow_origin: ['^http://localhost:[0-9]+']
        #     allow_headers: ['X-Custom-Auth']
        #     allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
        #     max_age: 3600
        #     hosts: ['^api\.']
# FOSUserBundle Config
fos_user:
    db_driver:       mongodb
    firewall_name:   api
    user_class:      OP\UserBundle\Document\User

#    #copier depuis github.../doc/configuration_reference.md
#    group:            #utilisation de group
##        group_class:  OP\UserBundle\Entity\Group  #la class group pour utilisateur
    use_listener:           false
    use_flash_notifications: true
    use_username_form_type:   true #mettre à false pour arreter l'utilisation de forme de fosUser... à suivre
    model_manager_name:     null  # change it to the name of your entity/document manager if you don't want to use the default one.
    from_email:
        address:        opinion@gmail.com #modifier par wajaja
        sender_name:    opinion
    profile:
        form:
            type:               FOS\UserBundle\Form\Type\ProfileFormType # or 'fos_user_profile' on Symfony < 2.8
            name:               fos_user_profile_form
            validation_groups:  [Profile, Default]
    change_password:
        form:
            type:               FOS\UserBundle\Form\Type\ChangePasswordFormType # or 'fos_user_change_password' on Symfony < 2.8
            name:               fos_user_change_password_form
            validation_groups:  [ChangePassword, Default]
    registration:
        confirmation:
            from_email:          # Use this node only if you don't want the global email address for the confirmation email
                address:        cedrickngeja@gmail.com   #modifier par wajaja
                sender_name:    opinion             #modifier par wajaja
            enabled:            false    #true                   # change to true for required email confirmation
            template:           FOSUserBundle:Registration:email.txt.twig
        form:
            type:               OP\UserBundle\Form\Type\RegistrationFormType  # 
            name:               registration  #fait...
            validation_groups:  [Registration, Default]
    resetting:
        retry_ttl: 7200 # Value in seconds, logic will use as hours
        token_ttl: 86400
        email:
            from_email: # Use this node only if you don't want the global email address for the resetting email
                address:        ...
                sender_name:    ...
            template:   '@FOSUser/Resetting/email.txt.twig'
        form:
            type:               FOS\UserBundle\Form\Type\ResettingFormType # or 'fos_user_resetting' on Symfony < 2.8
            name:               fos_user_resetting_form
            validation_groups:  [ResetPassword, Default]
    service:
        mailer:                 fos_user.mailer.twig_swift
        email_canonicalizer:    fos_user.util.canonicalizer.default
        username_canonicalizer: fos_user.util.canonicalizer.default
        token_generator:        fos_user.util.token_generator.default
        user_manager:           op_user.user_manager
        #the services of op_user_registration
    group:
        group_class:    OP\UserBundle\Document\Group
        group_manager:  op_user.group_manager
        form:
            type:               OP\UserBundle\Form\Type\GroupFormType # fos_user_group' on Symfony < 2.8
            name:               group
            validation_groups:  [Registration, Default]
sensio_framework_extra:
    #config for fos_rest
    view: { annotations: true } # true used for ViewResponseListener see fos_rest
    router: { annotations: true }
    request: { converters: true }
liip_imagine:
    resolvers:
       default:
          web_path: ~

    filter_sets:
        cache: ~
        thumb_100x100:
            quality: 90
            filters:
                thumbnail: { size: [100, 100], mode: inset }
        thumb_50x50:
            quality: 100
            filters:
                thumbnail: { size: [50, 50], mode: inset }
        thumb_cov:
            quality: 100
            filters:
                thumbnail: { size: [950, 300], mode: outbound }
                
        photo_10percent:
            quality: 10

        photo_50percent:
            quality: 50

        photo_80percent:
            quality: 80

        upload_min:
            quality: 90
            filters:
                thumbnail: { size: [80, 80], mode: inset }
fos_js_routing:
    routes_to_expose: [ "[a-zA-z0-9_-]+" ]          #All route will be exposed
    cache_control:
        # All are optional, defaults shown
        public: false   # can be true (public) or false (private)
        maxage: 300    # integer value, e.g. 300
        smaxage: 300   # integer value, e.g. 300
        expires: 5 minutes   # anything that can be fed to "new \DateTime($expires)", e.g. "5 minutes"
        vary: []        # string or array, e.g. "Cookie" or [ Cookie, Accept ]

doctrine_mongodb:
    connections:
        default:
            server: localhost:27017     #"mongodb://mongodb-01:27017,mongodb-02:27017,mongodb-03:27017"
            options: {}
    default_database: opinion
    document_managers:
        default:
            auto_mapping: true
            metadata_cache_driver:
                type: redis
                class: Doctrine\Common\Cache\RedisCache
                host: 127.0.0.1
                port: 6379
                instance_class: Redis
gos_pubsub_router:
    routers:
        redis: #available from container through gos_pubsub_router.redis
            context:
                tokenSeparator: ':' #redis channel are like : notification:user:user2 so the token separator is :
            resources:
                - "@OPPostBundle/Resources/config/pubsub/redis/notification.yml"
                - "@OPMediaBundle/Resources/config/pubsub/redis/notification.yml"
                - "@OPSocialBundle/Resources/config/pubsub/redis/notification.yml"
                - "@OPMessageBundle/Resources/config/pubsub/redis/notification.yml"
                - "@OPUserBundle/Resources/config/pubsub/redis/notification.yml"
gos_web_socket:
    pushers:
        zmq:
            default: false
            host: 127.0.0.1
            port: 5555
            persistent: true
            protocol: tcp
        wamp:
            host: 127.0.0.1
            port: 8080                   # Port for pusher should be same that server (socket)
    client:
        session_handler: session.handler.mongo   # Example: snc_redis.session.handler session.handler.mongo
        firewall: [main, api_login, refresh, api] # ws_firewal # Example: secured_area, you must replace it by your firewall
        storage:
            driver:  "@gos_web_socket.client_storage.driver.predis"
            ttl: 28800 #(optionally) time to live if you use redis driver
            prefix: client #(optionally) prefix if you use redis driver, create key "client:1" instead key "1"
            decorator: ~
    shared_config: false        # Useful to keep the server configuration isolated from the application
    # assetic: true #use assetic bundle
    server:
        port: 8080                          #default value
        host: 127.0.0.1
        origin_check:         false
        router:
            resources:
                - "@OPMediaBundle/Resources/config/pubsub/routing.yml"
                - "@OPPostBundle/Resources/config/pubsub/routing.yml"
                - "@OPMessageBundle/Resources/config/pubsub/routing.yml"
                # - "@OPSocialBundle/Resources/config/pubsub/routing.yml"
            context:
                tokenSeparator: "/"
    rpc:                  []
    topics:
        - "@op_media.topic_media_service"
        - '@OP\PostBundle\Topic\CommentTopic'
    periodic:             []
    servers:              []
    origins:              []

snc_redis:
    doctrine:
        metadata_cache:
            client: cache
            entity_manager: default          # the name of your entity_manager connection
            document_manager: default        # the name of your document_manager connection
        result_cache:
            client: cache
            document_manager: [default, read]  # you may specify multiple entity_managers
        query_cache:
            client: cache
            document_manager: default
        second_level_cache:
            client: cache
            document_manager: default
    monolog:
        client: monolog
        key: monolog
    swiftmailer:
        client: emails
        key: swiftmailer
    clients:
        emails:
            type: predis
            alias: emails
            dsn: redis://emails-spool-00.example.com
            logging: false
        monolog:
            type: predis
            alias: monolog
            dsn: redis://localhost/1
            logging: false
        default:
            type: predis
            alias: default
            dsn: "redis://localhost:6379"
            logging: '%kernel.debug%'
        cache:
            type: predis
            alias: cache
            dsn: "redis://localhost:6379"
            options:
                replication: true
                profile: 2.2
                connection_timeout: 10
                read_write_timeout: 30
        session:
            type: predis
            alias: session
            dsn: "redis://localhost:6379"
        ws_client:
            type: predis
            alias: client_storage.driver #snc_redis.client_storage.driver
            dsn: redis://127.0.0.1/2
            logging: '%kernel.debug%'
            options:
                profile: 2.2
                connection_timeout: 10
                read_write_timeout: 30
        # cluster:
        #     type: predis
        #     alias: cluster
        #     dsn:
        #         - redis://localhost/3?weight=10
        #         - redis://localhost/4?weight=5
        #         - redis://localhost/5?weight=1
    session:
        client: session
        #prefix: opinion #default prefix is session see framework conf section
        #use_as_default: true
        #looking: true
        #spin_lock_wait: 150000
        ttl: 1200
lsw_memcache:
    session:
        pool: sessions
        auto_load: false
        prefix: "session_"
        ttl: 7200
        locking: true
        spin_lock_wait: 15000
    pools:
        # default:
        #     servers:
        #         - { host: 10.0.0.1, tcp_port: 11211, weight: 15 }
        #         - { host: 10.0.0.2, tcp_port: 11211, weight: 30 }
            # options:
            #     allow_failover: true
            #     max_failover_attempts: 20
            #     default_port: 11211
            #     chunk_size: 32768
            #     protocol: ascii
            #     hash_strategy: consistent
            #     hash_function: crc32
            #     redundancy: true
            #     session_redundancy: 2
            #     compress_threshold: 20000
            #     lock_timeout: 15
        sessions:
            servers:
                 - { host: localhost, tcp_port: 11212 }
op_user:
    ttl: 2592000
    ttl_update: true
    firewall: main #[main, api_login, refresh, api]
    user_provider: op_user.user_provider
limenius_react:
    # Other options are "server_side" and "client_side"
    default_rendering: "both"
    
    serverside_rendering:
        # In case of error in server-side rendering, throw exception
        fail_loud: false
        
        # Replay every console.log message produced during server-side rendering
        # in the JavaScript console
        # Note that if enabled it will throw a (harmless) React warning
        trace: true
        
        # Mode can be `"phpexecjs"` (to execute Js from PHP using PhpExecJs),
        # or `"external"` (to rely on an external_server node.js server)
        # Default is `"phpexecjs"`
        mode: "external_server"
        
        # Location of the server bundle, that contains React and React on Rails.
        # null will default to `%kernel.root_dir%/Resources/webpack/server-bundle.js`
        # Only used with mode `phpexecjs`
        server_bundle_path: null
        
        # Only used with mode `external`
        # Location of the socket to communicate with a dummy node.js server. 
        # Socket type must be acceptable by php function stream_socket_client. Example unix://node.sock, tcp://127.0.0.1:5000  
        # More info: http://php.net/manual/en/function.stream-socket-client.php
        # Example of node server:
        # https://github.com/Limenius/symfony-react-sandbox/blob/master/app/Resources/node-server/server.js
        # null will default to `unix://%kernel.root_dir%/Resources/node-server/node.sock`
        server_socket_path: tcp://127.0.0.1:5000
white_october_pagerfanta:
    exceptions_strategy:
        out_of_range_page:        ~
        not_valid_current_page:   ~ #to show a 500 exception when the requested page is not valid instead.