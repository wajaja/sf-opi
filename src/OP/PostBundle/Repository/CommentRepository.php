<?php

namespace OP\PostBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends DocumentRepository
{
    public function findRecentComments($post_id, $refer){
        $qb = $this->createQueryBuilder('\OP\PostBundle\Document\Comment');
        if($refer === 'post') {
            $qb ->field('post.$id')->equals(new \MongoId($post_id))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            ->limit(5)
                ;
        } else {
            $qb ->field('photo.$id')->equals(new \MongoId($post_id))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            ->limit(5)
                ;
        }
        
        $listComments = $qb->getQuery()->execute()->toArray();
        return $listComments;
    }

    public function loadComments($postId, $refer){
        $qb = $this->createQueryBuilder('\OP\PostBundle\Document\Comment');
        if($refer === 'post') {
            $qb ->field('post.$id')->equals(new \MongoId($postId))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            // ->limit()
                ;
        } else if($refer === 'left') {
            $qb ->field('leftComment.$id')->equals(new \MongoId($postId))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            // ->limit()
                ;
        } else if($refer === 'right') {
            $qb ->field('rightComment.$id')->equals(new \MongoId($postId))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            // ->limit()
                ;
        } 
        else {
            $qb ->field('photo.$id')->equals(new \MongoId($postId))
            ->sort('createdAt', 'DESC')
            ->hydrate(false)
            ->limit(5)
                ;
        }
        $comments = $qb ->getQuery()
                        ->execute()
                        ->toArray();
        return $comments;
    }
    
    // public function findCommentIds($post_id){        
    //     $qb = $this->createQueryBuilder('\OP\PostBundle\Document\Comment');

    //     $qb ->hydrate(false)
    //         ->field('post.$id')->equals(new \MongoId($post_id))
    //         ->select('id.$id');
        
    //     $db_ids = $qb->getQuery()->execute()->toArray();
    //     $ids = [];
    //     foreach ($db_ids as $id => $value) {
    //         $ids [] = $id; //(string)$value['_id'];
    //     }
    //     return $ids;
    // }
    
    /**
     * select lastCommentDate; then find ten previous comment
     * @param type $lastCommentId
     * @param type $postId
     * @return type
     */
    public function loadMoreComments($lastCommentId, $postId, $limit){
        if(!$limit){                //for ajax load more comment
            $qb = $this->createQueryBuilder('\OP\PostBundle\Document\Comment');
            $qb ->field('post.$id')->equals(new \MongoId($postId))
                ->field('id')->gt(new \MongoId($lastCommentId));

            $comments = $qb->getQuery()->execute()->toArray();  
            return $comments;
        }else{
            $qb = $this->createQueryBuilder('\OP\PostBundle\Document\Comment');
            $qb ->field('post.$id')->equals(new \MongoId($postId))
                ->limit(10)
                ->field('id')->gt(new \MongoId($lastCommentId));

            $comments = $qb->getQuery()->execute()->toArray();  
            return $comments;
        }
    }
}