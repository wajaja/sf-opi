<?php

namespace OP\SocialBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;


/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ODM. Add your own custom
 * repository methods below.
 */
class MeetYouRepository extends DocumentRepository
{
//    public function findNewsSuggestion(){
//        $qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification')
//                   ->field('author')->equals()
//                
//    }
	public function notificationByContentId($contentId){
		$qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification')
		    ->field('contentId')->equals($contentId)
			->sort('createdAt', 'desc')
			->limit(1);
			//->field('enabled')->equals(true)
				// ->addOr($qb->expr()
				// 	->field('firstname')->equals(new \MongoRegex('/.*'.$firstname.'.*/i')))
				// ->addOr($qb->expr()
				// 	->field('lastname')->equals(new \MongoRegex('/.*'.$firstname.'.*/i')))
				//->select(array('_id', 'username','firstname', 'lastname', 'profilePic' ));
		$notifs = $qb->getQuery()
					->execute()
					->toArray();
		return $notifs;
	}
	public function lessNewsFreindsSuggest()
	{
            
	}
	public function lessNewsPublicSuggest()
	{

	}
        
	public function moreNewsFreindsSuggest()
	{
            $qb = $this->createQueryBuilder('OP\UserBundle\Document\User');
            // $users = []; 		$lastname = '';
            // $name = 's'.' '.$searchString;
            // $name_array = explode(' ', $name); 			//explode the searchString
            // $firstname = $name_array[1];
            // 	$qb ->field('locked')->equals(false)->field('enabled')->equals(true)
            // 		->addOr($qb->expr()
            // 			->field('firstname')->equals(new \MongoRegex('/.*'.$firstname.'.*/i')))
            // 		->addOr($qb->expr()
            // 			->field('lastname')->equals(new \MongoRegex('/.*'.$firstname.'.*/i')))
            // 		->select(array('_id', 'username','firstname', 'lastname', 'profilePic' ));
            // 	$users = $qb->getQuery()
            // 			->execute()
            // 			->toArray();
            $qb ->field('locked')->equals(false)->field('enabled')->equals(true);
            $users = $qb->getQuery()
                            ->execute()
                            ->toArray();
            return $users;
	}
        
        public function findSimpleFriendsNotes($friends_ids = [])
	{
            $qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification');
            $qb->field('participants.$id')->in($friends_ids)
                ->hydrate(false);            
            $notifications = $qb->getQuery()
                            ->execute()
                            ->toArray();
            return $notifications;
	}
        
	public function moreNewsPublicSuggest() {

	}

	public function findNotifByDateForUserId($fromDate, $toDate, $userId) {
		$qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification');
        $qb 
            ->addAnd($qb->expr()->field('lastParticipantActivityDate')->gte($fromDate))
            ->addAnd($qb->expr()->field('lastParticipantActivityDate')->lte($toDate))
            ->field('participants.$id')->equals(new \MongoId($userId))
            ->field('unreadForParticipants')->equals($userId)
            ->select('lastParticipantActivityDate')
            ->hydrate(false)
            ;
        
        $notifs = $qb->getQuery()
                    ->execute()
                    ->toArray();
        return $notifs;    
	}

    public function findDayNotifs($fromDate, $toDate, $userId) {
        $qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification');
        $qb 
            ->addAnd($qb->expr()->field('lastParticipantActivityDate')->gte($fromDate))
            ->addAnd($qb->expr()->field('lastParticipantActivityDate')->lte($toDate))
            ->field('participants.$id')->equals(new \MongoId($userId))
            // ->field('unreadForParticipants')->equals($userId)
            ;
        
        $notifs = $qb->getQuery()
                    ->execute()
                    ->toArray();
        return $notifs;    
    }


    public function loadNotifications($user, $initIds, $limit) {
        $qb = $this->createQueryBuilder('OP\SocialBundle\Document\Notification');
        $qb 
            ->field('participants.$id')->equals(new \MongoId($user->getId()))
            ->field('id')->notIn($initIds)
            ->limit($limit)
            // ->field('unreadForParticipants')->equals($userId)
            // ->select('lastParticipantActivityDate')
            // ->hydrate(false)
            ;
        
        $notifs = $qb->getQuery()
                    ->execute()
                    ->toArray();
        return $notifs;    
    }

    public function countAlerts($userId, $lastReadingDate) {
        // $qb = $this->createQueryBuilder('\OP\UserBundle\Document\Invitation\Invitation');
        // $qb ->field('receiver.$id')->equals(new \MongoId($userId))
        //     ->field('metadata.isConfirmed')->equals(false)
        //     ->field('metadata.isMasked')->equals(false)
        //     ->field('sendingDate')->gt($lastReadingDate)
        //     ->select('sender', 'sendingDate');

        // $invitations = $qb->getQuery()
        //                  ->execute()->toArray();
        return 2;
    }


}
